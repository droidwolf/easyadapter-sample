package com.droidwolf.easyadapter_sample.db;

import java.util.List;
import java.util.ArrayList;
import android.text.TextUtils;
import android.database.Cursor;
import android.content.ContentValues;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

/*
 * generated by sqliteDaoGen.jar
 * http://obacow.iteye.com/
 */
public class PersonDao{
	public static final String TABLENAME = "Person";
	public static final Object SYNC= new Object();
	private final SQLiteOpenHelper mOpenHelper;

	public PersonDao(SQLiteOpenHelper openHelper){
		mOpenHelper=openHelper;
	}
	//
	//query
	//
	public Cursor query(String whereClause, String []whereArgs){
		final String sql = "SELECT "
			+ COLUMNS.NAME + ","
			+ COLUMNS.ID
			+ " FROM " + (TextUtils.isEmpty(whereClause)? TABLENAME : TABLENAME+" WHERE "+whereClause);
		return mOpenHelper.getReadableDatabase().rawQuery(sql, whereArgs);
	}
	public List<Person> queryToList(String whereClause, String []whereArgs){
		Cursor cursor=null;
		try{
			synchronized(SYNC){
				if ( (cursor = query(whereClause, whereArgs) )==null || cursor.getCount()<1)return null;
				final List<Person> list = new ArrayList<Person>(cursor.getCount());
				while (cursor.moveToNext()){
					final Person entity=new Person();
					entity.setName( cursor.getString(COLUMNINDEXS.NAME) );
					entity.setId( cursor.getInt(COLUMNINDEXS.ID) );
					list.add(entity);
				}
				cursor.close();
				return list;
			}
		}catch(SQLException ex){
			ex.printStackTrace();
		}finally{
			if (cursor!= null) cursor.close();
		}
		return null;
	}
	public Person queryFirst(String whereClause, String []whereArgs){
		final List<Person> list=queryToList(whereClause,whereArgs);
		return list!=null&& list.size()>0? list.get(0):null;	
	}
	public int queryTotalRows(String whereClause, String []whereArgs){
		final String sql = "SELECT COUNT(*) FROM "  +(TextUtils.isEmpty(whereClause)? TABLENAME : TABLENAME+" WHERE "+whereClause);
		Cursor cursor=null;
		SQLiteDatabase db=null;
		try{
			synchronized(SYNC){
				cursor=(db=mOpenHelper.getReadableDatabase()).rawQuery(sql, whereArgs);
				if (cursor!=null&&cursor.moveToFirst() ) return cursor.getInt(0);
			}
		}catch(SQLException ex){
			ex.printStackTrace();
		}finally{
			if (cursor!=null) cursor.close();
			if (db!=null) db.close();
		}
		return 0;
	}

	//
	//inset, update, delete
	//
	public boolean insert(Person entity){
		SQLiteDatabase db=null;
		try{
			return insert0(db=mOpenHelper.getWritableDatabase(), entity);
		}catch(SQLException ex){
			ex.printStackTrace();
		}finally{
			if (db!=null) db.close();
		}
		return false;
	}
	public boolean update(Person entity){
		SQLiteDatabase db=null;
		try{
			return update0(db=mOpenHelper.getWritableDatabase(), entity, COLUMNS.ID+"=?", new String[]{String.valueOf(entity.getId())} );
		}catch(SQLException ex){
			ex.printStackTrace();
		}finally{
			if (db!=null) db.close();
		}
		return false;
	}
	public boolean delete(Person entity){
		SQLiteDatabase db=null;
		try{
			return delete0(db=mOpenHelper.getWritableDatabase(), COLUMNS.ID+"=?", new String[]{String.valueOf(entity.getId())} );
		}catch(SQLException ex){
			ex.printStackTrace();
		}finally{
			if (db!=null) db.close();
		}
		return false;
	}
	/*private*/ static final boolean insert0(SQLiteDatabase db, Person entity){
		return db.insert(TABLENAME, null, tranEntity2CV(entity, true) ) >0;
	}
	private static final boolean update0(SQLiteDatabase db, Person entity, String whereClause, String []whereArgs){
		return db.update(TABLENAME, tranEntity2CV(entity, false), whereClause, whereArgs) >0;
	}
	private static final boolean delete0(SQLiteDatabase db, String whereClause, String []whereArgs){
		return db.delete(TABLENAME, whereClause, whereArgs) >0;
	}
	private static final ContentValues tranEntity2CV(Person entity, boolean forInsert){
		final ContentValues cv=new ContentValues(1);
		cv.put(COLUMNS.NAME, entity.getName());
		return cv;
	}

	//
	//bulkInsert, bulkUpdate, bulkDelete
	//
	public boolean bulkInsert(List<Person> list){
		SQLiteDatabase db=null;
		try{
			(db=mOpenHelper.getWritableDatabase()).beginTransaction();
			for (int i=0, nlen=list.size(); i<nlen; i++){
				if(!insert0(db, list.get(i) ) ) return false;
			}
			db.setTransactionSuccessful();
			return true;
		}catch(SQLException ex){
			ex.printStackTrace();
		}finally{
			if (db!=null){
				db.endTransaction();
				db.close();
			}
		}
		return false;
	}
	public boolean bulkUpdate(List<Person> list){
		SQLiteDatabase db=null;
		try{
			(db=mOpenHelper.getWritableDatabase()).beginTransaction();
			final String []array=new String[1];
			for (int i=0, nlen=list.size(); i<nlen; i++){
				Person entity=list.get(i);
				array[0]=String.valueOf(entity.getId());
				if(!update0(db, entity, COLUMNS.ID+"=?",array) ) return false;
			}
			db.setTransactionSuccessful();
			return true;
		}catch(SQLException ex){
			ex.printStackTrace();
		}finally{
			if (db!=null){
				db.endTransaction();
				db.close();
			}
		}
		return false;
	}
	public boolean bulkDelete(List<Person> list){
		SQLiteDatabase db=null;
		try{
			final StringBuffer sb = new StringBuffer().append(COLUMNS.ID).append(" IN(");
			for (int i=0, nlen=list.size()-1; i<=nlen; i++){
				sb.append(list.get(i).getId() ).append(i==nlen? " )" : ", ");
			}
			return delete0(db=mOpenHelper.getWritableDatabase(), sb.toString(), null);
		}catch(SQLException ex){
			ex.printStackTrace();
		}finally{
			if (db!=null) db.close();
		}
		return false;
	}

	//
	//stuff
	//
	public static final class COLUMNS{
		public static final String NAME="[Name]", ID="[_id]";
	}
	public static final class COLUMNINDEXS{
		public static final int NAME=0, ID=1;
	}
	static final void dropTable(SQLiteDatabase db){
		db.execSQL("DROP TABLE IF EXISTS " + TABLENAME + ";");
	}
	static final void createTable(SQLiteDatabase db){
		db.execSQL( "CREATE TABLE IF NOT EXISTS " + TABLENAME + "("
			 + COLUMNS.NAME + " TEXT NOT NULL,"
			 + COLUMNS.ID + " INTEGER PRIMARY KEY AUTOINCREMENT);" );
	}
}//end class PersonDao
